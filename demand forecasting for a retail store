import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error

# Step 1: Import necessary libraries
import warnings
warnings.filterwarnings('ignore')

# Step 2: Generate synthetic data
# For demonstration, we create a time series data for demand over 3 years (daily data)
np.random.seed(42)
dates = pd.date_range(start='2020-01-01', end='2022-12-31', freq='D')
demand = np.random.poisson(lam=50, size=len(dates)) + np.sin(np.linspace(0, 50, len(dates))) * 10

data = pd.DataFrame({'date': dates, 'demand': demand})
data.set_index('date', inplace=True)

# Plot the synthetic data
plt.figure(figsize=(12, 6))
plt.plot(data, label='Daily Demand')
plt.title('Daily Demand over 3 Years')
plt.xlabel('Date')
plt.ylabel('Demand')
plt.legend()
plt.show()

# Step 3: Data preprocessing
# Split data into training and test sets
train_size = int(len(data) * 0.8)
train, test = data[:train_size], data[train_size:]

# Step 4: Model building and training
# We'll use SARIMA (Seasonal ARIMA) as the model
model = SARIMAX(train['demand'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))
sarima_model = model.fit(disp=False)

# Forecasting on test set
n_forecast = len(test)
forecast = sarima_model.get_forecast(steps=n_forecast)
forecast_index = test.index
forecast_values = forecast.predicted_mean
confidence_intervals = forecast.conf_int()

# Step 5: Forecasting and visualization
# Plot the results
plt.figure(figsize=(12, 6))
plt.plot(train.index, train['demand'], label='Train Data')
plt.plot(test.index, test['demand'], label='Test Data')
plt.plot(forecast_index, forecast_values, label='Forecast', color='red')
plt.fill_between(forecast_index, confidence_intervals.iloc[:, 0], confidence_intervals.iloc[:, 1], 
                 color='pink', alpha=0.3)
plt.title('Demand Forecasting using SARIMA')
plt.xlabel('Date')
plt.ylabel('Demand')
plt.legend()
plt.show()

# Calculate and print the mean squared error of the forecast
mse = mean_squared_error(test['demand'], forecast_values)
print(f'Mean Squared Error of the forecast: {mse}')
