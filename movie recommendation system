import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import tkinter as tk
from tkinter import messagebox

# Sample movie data
data = {
    'movie_id': [1, 2, 3, 4, 5],
    'title': ["The Matrix", "Inception", "Interstellar", "The Godfather", "The Dark Knight"],
    'genres': ["Action|Sci-Fi", "Action|Sci-Fi", "Adventure|Drama|Sci-Fi", "Crime|Drama", "Action|Crime|Drama"]
}

movies_df = pd.DataFrame(data)

# Preprocess genres
movies_df['genres'] = movies_df['genres'].apply(lambda x: x.split('|'))

# Function to create a genre string for each movie
def create_genre_string(genres):
    return ' '.join(genres)

movies_df['genre_str'] = movies_df['genres'].apply(create_genre_string)

# Vectorize the genre strings
vectorizer = CountVectorizer()
genre_matrix = vectorizer.fit_transform(movies_df['genre_str'])

# Compute cosine similarity
cosine_sim = cosine_similarity(genre_matrix, genre_matrix)

# Function to get recommendations
def get_recommendations(title, cosine_sim=cosine_sim):
    idx = movies_df[movies_df['title'] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:6]  # Get top 5 similar movies
    movie_indices = [i[0] for i in sim_scores]
    return movies_df['title'].iloc[movie_indices].tolist()

# Function to show recommendations
def show_recommendations():
    movie = entry.get()
    if movie not in movies_df['title'].values:
        messagebox.showerror("Error", "Movie not found!")
        return
    
    recommendations = get_recommendations(movie)
    result_var.set("\n".join(recommendations))

# Create the main window
root = tk.Tk()
root.title("Movie Recommendation System")

# Create and place the widgets
label = tk.Label(root, text="Enter a movie you like:")
label.pack(pady=10)

entry = tk.Entry(root, width=50)
entry.pack(pady=10)

button = tk.Button(root, text="Get Recommendations", command=show_recommendations)
button.pack(pady=10)

result_var = tk.StringVar()
result_label = tk.Label(root, textvariable=result_var, justify="left")
result_label.pack(pady=10)

# Run the application
root.mainloop()
